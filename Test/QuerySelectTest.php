<?php

namespace Tree\Test;

require_once 'PHPUnit/Autoload.php';
require_once '../Database/Connection.php';
require_once '../Database/Query.php';
require_once '../Database/Query/Where.php';
require_once '../Database/Query/Select.php';
require_once '../Database/Query/Predicate.php';
require_once 'Fake/Connection.php';

use \Tree\Database\Query;
use \Tree\Database\Query_Select;
use \PHPUnit_Framework_TestCase;
use \Tree\Test\Fake_Connection;

/**
 * QuerySelectTest
 *
 * Verifies that the SQL generated by Query_Select is as expected
 * 
 * @author     Henry Smith <henry@henrysmith.org> 
 * @copyright  2011 Henry Smith
 * @license    GPLv2.0
 * @package    Tree
 * @subpackage Test
 * @uses       \PHPUnit_Framework_TestCase
 * @version    0.00
 */
class QuerySelectTest extends PHPUnit_Framework_TestCase {

	public function setUp()
	{
		$this->db = new Fake_Connection;
	}

	/**
	 * Verifies that the most basic SELECT query possible is generated properly
	 */
	public function testBasicSelectQuery()
	{
		$query = new Query_Select($this->db);

		$query->select('*')->from('sometable');

		$sql = $query->getSql();

		$this->assertEquals("SELECT *\nFROM `sometable`\n", $sql);
	}

	/**
	 * Verifies that table name aliasing works
	 */
	public function testTableNameAlias()
	{
		$query = new Query_Select($this->db);

		$query->select('*')->from(array('sometable' => 'alias'));

		$sql = $query->getSql();

		$this->assertEquals("SELECT *\nFROM `sometable` `alias`\n", $sql);
	}

	/**
	 * Verifies that ORDER BY expressions are generated properly
	 */
	public function testOrderBy()
	{
		$query = new Query_Select($this->db);

		$query->select('*');
		$query->from('sometable');
		$query->orderBy('test', 'asc');

		$sql = $query->getSql();

		$this->assertEquals("SELECT *\nFROM `sometable`\nORDER BY `test` ASC\n", $sql);
	}

	/**
	 * Verifies that WHERE expressions are generated properly
	 */
	public function testWhereExpression()
	{
		$query = new Query_Select($this->db);

		$query->select('*');
		$query->from('sometable');
		$query->where('id > %d', 10);
		$query->where('title = %s', 'example');
		$query->orWhere('status = %d', 2);

		$expected  = "SELECT *\n";
		$expected .= "FROM `sometable`\n";
		$expected .= "WHERE id > 10\n";
		$expected .= "AND title = 'example'\n";
		$expected .= "OR status = 2\n";

		$actual = $query->getSql();

		$this->assertEquals($expected, $actual);
	}

	/**
	 * Verifies that LIMIT expressions are generated properly
	 */
	public function testLimitExpression()
	{
		$query = new Query_Select($this->db);
		$query->select('*');
		$query->from('sometable');
		$query->limit(10);

		$expected  = "SELECT *\n";
		$expected .= "FROM `sometable`\n";
		$expected .= "LIMIT 10\n";

		$actual = $query->getSql();

		$this->assertEquals($expected, $actual);
	}

}

